#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞–º–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç semantic versioning –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é changelog
 */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

const exec = (command, options = {}) => {
  try {
    return execSync(command, { 
      stdio: 'inherit', 
      encoding: 'utf8',
      ...options 
    })
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${command}`, 'red')
    process.exit(1)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const checkChanges = () => {
  try {
    const status = execSync('git status --porcelain', { encoding: 'utf8' })
    if (status.trim()) {
      log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', 'yellow')
      console.log(status)
      return false
    }
    return true
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ git', 'red')
    return false
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–æ–≤
const checkTags = () => {
  try {
    const tags = execSync('git tag --list', { encoding: 'utf8' })
    return tags.trim().split('\n').filter(tag => tag.trim())
  } catch (error) {
    return []
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
const getCurrentVersion = () => {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
    return packageJson.version
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json', 'red')
    return '0.0.0'
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ conventional commits
const checkCommits = () => {
  try {
    const commits = execSync('git log --oneline', { encoding: 'utf8' })
    const lines = commits.trim().split('\n')
    
    const conventionalCommits = lines.filter(line => {
      return /^(feat|fix|perf|refactor|docs|style|test|build|ci|chore|revert)(\(.+\))?: .+/.test(line)
    })
    
    log(`üìù –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: ${lines.length}`, 'blue')
    log(`‚úÖ Conventional commits: ${conventionalCommits.length}`, 'green')
    log(`‚ùå –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã: ${lines.length - conventionalCommits.length}`, 'red')
    
    if (conventionalCommits.length === 0) {
      log('‚ö†Ô∏è  –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞', 'yellow')
      return false
    }
    
    return true
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–∏—Ç–æ–≤', 'red')
    return false
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
const createRelease = (type = 'patch') => {
  log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ ${type} —Ä–µ–ª–∏–∑–∞...`, 'cyan')
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  if (!checkChanges()) {
    log('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'red')
    return
  }
  
  if (!checkCommits()) {
    log('‚ùå –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞', 'red')
    return
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
  const currentVersion = getCurrentVersion()
  log(`üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`, 'blue')
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —Å standard-version
    exec(`npx standard-version --release-as ${type}`)
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    const newVersion = getCurrentVersion()
    log(`‚úÖ –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: ${newVersion}`, 'green')
    
    // –ü—É—à —Ç–µ–≥–æ–≤
    exec('git push --follow-tags origin main')
    
    log('üéâ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'green')
    
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞', 'red')
    process.exit(1)
  }
}

// Dry run
const dryRun = () => {
  log('üîç Dry run - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...', 'cyan')
  
  if (!checkChanges()) {
    log('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'red')
    return
  }
  
  if (!checkCommits()) {
    log('‚ùå –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞', 'red')
    return
  }
  
  try {
    exec('npx standard-version --dry-run')
    log('‚úÖ Dry run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'green')
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ dry run', 'red')
    process.exit(1)
  }
}

// –ü–æ–∫–∞–∑ –ø–æ–º–æ—â–∏
const showHelp = () => {
  log('üìö DC25 UI/UX - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞–º–∏', 'bright')
  console.log('')
  log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', 'blue')
  console.log('  node scripts/release.js [–∫–æ–º–∞–Ω–¥–∞]')
  console.log('')
  log('–ö–æ–º–∞–Ω–¥—ã:', 'blue')
  console.log('  patch     - –°–æ–∑–¥–∞—Ç—å patch —Ä–µ–ª–∏–∑ (1.0.0 -> 1.0.1)')
  console.log('  minor     - –°–æ–∑–¥–∞—Ç—å minor —Ä–µ–ª–∏–∑ (1.0.0 -> 1.1.0)')
  console.log('  major     - –°–æ–∑–¥–∞—Ç—å major —Ä–µ–ª–∏–∑ (1.0.0 -> 2.0.0)')
  console.log('  dry-run   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞')
  console.log('  check     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞')
  console.log('  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É')
  console.log('')
  log('–ü—Ä–∏–º–µ—Ä—ã:', 'blue')
  console.log('  node scripts/release.js patch')
  console.log('  node scripts/release.js minor')
  console.log('  node scripts/release.js dry-run')
  console.log('')
  log('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:', 'yellow')
  console.log('  - –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã')
  console.log('  - –ö–æ–º–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å conventional commits')
  console.log('  - –ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —á–∏—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
const checkStatus = () => {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞...', 'cyan')
  
  const currentVersion = getCurrentVersion()
  log(`üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`, 'blue')
  
  const tags = checkTags()
  log(`üè∑Ô∏è  –¢–µ–≥–æ–≤: ${tags.length}`, 'blue')
  
  if (tags.length > 0) {
    log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥: ${tags[tags.length - 1]}`, 'blue')
  }
  
  const hasChanges = !checkChanges()
  if (hasChanges) {
    log('‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'yellow')
  } else {
    log('‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è', 'green')
  }
  
  const hasCommits = checkCommits()
  if (hasCommits) {
    log('‚úÖ –ï—Å—Ç—å –∫–æ–º–º–∏—Ç—ã –¥–ª—è —Ä–µ–ª–∏–∑–∞', 'green')
  } else {
    log('‚ùå –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞', 'red')
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = () => {
  const command = process.argv[2] || 'help'
  
  switch (command) {
    case 'patch':
      createRelease('patch')
      break
    case 'minor':
      createRelease('minor')
      break
    case 'major':
      createRelease('major')
      break
    case 'dry-run':
      dryRun()
      break
    case 'check':
      checkStatus()
      break
    case 'help':
    default:
      showHelp()
      break
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main()
}

module.exports = {
  createRelease,
  dryRun,
  checkStatus,
  checkChanges,
  checkCommits,
  getCurrentVersion
}
