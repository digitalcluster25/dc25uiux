#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

class ChangelogGenerator {
  constructor() {
    this.projectRoot = process.cwd()
    this.changelogPath = path.join(this.projectRoot, 'CHANGELOG.md')
    this.packageJsonPath = path.join(this.projectRoot, 'package.json')
  }

  generateChangelog() {
    try {
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog...')
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
      const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'))
      const currentVersion = packageJson.version
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
      const commits = this.getCommitsSinceLastTag()
      
      if (commits.length === 0) {
        console.log('‚ÑπÔ∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ changelog')
        return
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º
      const groupedCommits = this.groupCommitsByType(commits)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é changelog
      const newSection = this.generateChangelogSection(currentVersion, groupedCommits)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º CHANGELOG.md
      this.updateChangelog(newSection)
      
      console.log('‚úÖ Changelog —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog:', error.message)
      process.exit(1)
    }
  }

  getCommitsSinceLastTag() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
      let lastTag
      try {
        lastTag = execSync('git describe --tags --abbrev=0', { encoding: 'utf8' }).trim()
      } catch (error) {
        // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
        lastTag = ''
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
      const command = lastTag 
        ? `git log ${lastTag}..HEAD --pretty=format:"%h|%s|%an|%ad" --date=short`
        : `git log --pretty=format:"%h|%s|%an|%ad" --date=short`
        
      const output = execSync(command, { encoding: 'utf8' })
      
      if (!output.trim()) {
        return []
      }
      
      return output.trim().split('\n').map(line => {
        const [hash, message, author, date] = line.split('|')
        return { hash, message, author, date }
      })
      
    } catch (error) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã:', error.message)
      return []
    }
  }

  groupCommitsByType(commits) {
    const groups = {
      feat: [],
      fix: [],
      docs: [],
      style: [],
      refactor: [],
      perf: [],
      test: [],
      build: [],
      ci: [],
      chore: [],
      revert: []
    }
    
    commits.forEach(commit => {
      const type = this.extractCommitType(commit.message)
      if (groups[type]) {
        groups[type].push(commit)
      }
    })
    
    return groups
  }

  extractCommitType(message) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∏–∑ conventional commit
    const match = message.match(/^(\w+)(?:\(.+\))?:/)
    return match ? match[1] : 'chore'
  }

  generateChangelogSection(version, groupedCommits) {
    const date = new Date().toISOString().split('T')[0]
    let section = `## [${version}] - ${date}\n\n`
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    const typeLabels = {
      feat: '### Added',
      fix: '### Fixed',
      docs: '### Documentation',
      style: '### Style',
      refactor: '### Refactored',
      perf: '### Performance',
      test: '### Tests',
      build: '### Build',
      ci: '### CI/CD',
      chore: '### Chore',
      revert: '### Reverted'
    }
    
    Object.entries(groupedCommits).forEach(([type, commits]) => {
      if (commits.length > 0) {
        section += `${typeLabels[type]}\n`
        commits.forEach(commit => {
          const description = this.formatCommitDescription(commit.message)
          section += `- ${description}\n`
        })
        section += '\n'
      }
    })
    
    return section
  }

  formatCommitDescription(message) {
    // –£–¥–∞–ª—è–µ–º —Ç–∏–ø –∏ scope –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const match = message.match(/^\w+(?:\(.+\))?:\s*(.+)/)
    return match ? match[1] : message
  }

  updateChangelog(newSection) {
    let changelogContent = ''
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π changelog
    if (fs.existsSync(this.changelogPath)) {
      changelogContent = fs.readFileSync(this.changelogPath, 'utf8')
    } else {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π changelog
      changelogContent = `# Changelog

–í—Å–µ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ DC25 UI/UX –±—É–¥—É—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.

–§–æ—Ä–º–∞—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ [Keep a Changelog](https://keepachangelog.com/ru/1.0.0/),
–∏ –ø—Ä–æ–µ–∫—Ç —Å–ª–µ–¥—É–µ—Ç [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

`
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const lines = changelogContent.split('\n')
    const insertIndex = lines.findIndex(line => line.startsWith('## ['))
    
    if (insertIndex === -1) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
      changelogContent += newSection
    } else {
      // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
      lines.splice(insertIndex, 0, newSection.trim())
      changelogContent = lines.join('\n')
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π changelog
    fs.writeFileSync(this.changelogPath, changelogContent)
  }

  validateCommits() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤...')
      
      const commits = this.getCommitsSinceLastTag()
      const invalidCommits = []
      
      commits.forEach(commit => {
        if (!this.isValidCommitMessage(commit.message)) {
          invalidCommits.push(commit)
        }
      })
      
      if (invalidCommits.length > 0) {
        console.warn('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∫–æ–º–º–∏—Ç—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º:')
        invalidCommits.forEach(commit => {
          console.warn(`  - ${commit.hash}: ${commit.message}`)
        })
        console.warn('\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ conventional commits —Ñ–æ—Ä–º–∞—Ç:')
        console.warn('  feat: add new feature')
        console.warn('  fix: resolve bug')
        console.warn('  docs: update documentation')
      } else {
        console.log('‚úÖ –í—Å–µ –∫–æ–º–º–∏—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç conventional commits')
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤:', error.message)
    }
  }

  isValidCommitMessage(message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ conventional commits
    const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?:\s.+/
    return conventionalCommitRegex.test(message)
  }

  generateFullChangelog() {
    try {
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ changelog...')
      
      const command = 'conventional-changelog -p angular -i CHANGELOG.md -s -r 0'
      execSync(command, { stdio: 'inherit' })
      
      console.log('‚úÖ –ü–æ–ª–Ω—ã–π changelog —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ changelog:', error.message)
      process.exit(1)
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const args = process.argv.slice(2)
  const generator = new ChangelogGenerator()
  
  if (args.includes('--validate')) {
    generator.validateCommits()
  } else if (args.includes('--full')) {
    generator.generateFullChangelog()
  } else {
    generator.generateChangelog()
  }
}

module.exports = ChangelogGenerator
